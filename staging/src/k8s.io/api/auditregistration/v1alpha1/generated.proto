/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = 'proto2';

package k8s.io.api.auditregistration.v1alpha1;

import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1alpha1";

// AuditClass is a set of rules that categorize requests
//
// This should be considered a highly privileged object, as modifying it
// will change what is logged.
message AuditClass {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec is the spec for the audit class
  optional AuditClassSpec spec = 2;
}

// AuditClassList is a list of AuditClass items
message AuditClassList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of audit classes
  repeated AuditClass items = 2;
}

// AuditClassSpec is the spec for the audit class
message AuditClassSpec {
  // RequestSelectors defines a list of RequestSelectors
  repeated RequestSelector requestSelectors = 1;
}

// AuditSink represents a cluster level audit sink
message AuditSink {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec defines the audit configuration spec
  optional AuditSinkSpec spec = 2;
}

// AuditSinkList is a list of AuditSink items.
message AuditSinkList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of audit configurations.
  repeated AuditSink items = 2;
}

// AuditSinkSpec holds the spec for the audit sink
message AuditSinkSpec {
  // Policy defines the policy for selecting which events should be sent to the webhook
  // required
  optional Policy policy = 1;

  // Webhook to send events
  // required
  optional Webhook webhook = 2;
}

// GroupResources represents resource kinds in an API group.
message GroupResources {
  // Group is the name of the API group that contains the resources.
  // The empty string represents the core API group.
  // +optional
  optional string group = 1;

  // Resources is a list of resources in this group.
  //
  // For example:
  // 'pods' matches pods.
  // 'pods/log' matches the log subresource of pods.
  // '*' matches all resources and their subresources.
  // 'pods/*' matches all subresources of pods.
  // '*/scale' matches all scale subresources.
  //
  // If wildcard is present, the validation rule will ensure resources do not
  // overlap with each other.
  //
  // An empty list implies all resources and subresources in this API groups apply.
  // +optional
  repeated string resources = 2;

  // ObjectNames is a list of resource instance names in this group.
  // Using this field requires Resources to be specified.
  // An empty list implies that every instance of the resource is matched.
  // +optional
  repeated string objectNames = 3;
}

// Policy defines the configuration of how audit events are logged
message Policy {
  // Level is the base Level that all requests are recorded at.
  // available options: None, Metadata, Request, RequestResponse
  // required
  optional string level = 1;

  // Stages is a list of stages for which events are created.
  // If no stages are given nothing will be logged
  // +optional
  repeated string stages = 2;

  // PolicyRules define how classes should be handled.
  // A request may fall under multiple audit classes.
  // Rules are evaluated in order (first matching wins).
  // Rules override the top Level & Stage.
  // Unmatched requests use the top level rule.
  // +optional
  repeated PolicyRule rules = 3;
}

// PolicyRule defines how a class is handled per sink
message PolicyRule {
  // AuditClassName of the AuditClass object. This rule matches requests that are
  // classified with this AuditClass
  optional string auditClassName = 1;

  // Level is the Level that all requests this rule applies to are recorded at.
  // available options: None, Metadata, Request, RequestResponse
  // This will override the parent Policy Level.
  // required
  optional string level = 2;

  // Stages is a list of stages for which events are created.
  // If no stages are given nothing will be logged
  // +optional
  repeated string stages = 3;
}

// RequestSelector selects requests by matching on the given fields. Selectors are
// used to compose audit classes.
message RequestSelector {
  // The users (by authenticated user name) in this attribute group.
  // An empty list implies every user.
  // +optional
  repeated string users = 2;

  // The user groups in this attribute group. A user is considered matching
  // if it is a member of any of the UserGroups.
  // An empty list implies every user group.
  // +optional
  repeated string userGroups = 3;

  // The verbs included in this attribute group.
  // An empty list implies every verb.
  // +optional
  repeated string verbs = 4;

  // Resources in this attribute group. An empty list implies all kinds in all API groups.
  // +optional
  repeated GroupResources resources = 5;

  // Namespaces in this attribute group.
  // The empty string "" matches non-namespaced resources.
  // An empty list implies every namespace.
  // Non-namespaced resources will only be matched if the empty string is present in the list
  // +optional
  repeated string namespaces = 6;

  // NonResourceURLs is a set of URL paths that should be audited.
  // *s are allowed, but only as the full, final step in the path, and are delimited by the path separator
  // Examples:
  //  "/metrics" - Log requests for apiserver metrics
  //  "/healthz/*" - Log all health checks
  // +optional
  repeated string nonResourceURLs = 7;
}

// ServiceReference holds a reference to Service.legacy.k8s.io
message ServiceReference {
  // `namespace` is the namespace of the service.
  // Required
  optional string namespace = 1;

  // `name` is the name of the service.
  // Required
  optional string name = 2;

  // `path` is an optional URL path which will be sent in any request to
  // this service.
  // +optional
  optional string path = 3;

  // If specified, the port on the service that hosting webhook.
  // Default to 443 for backward compatibility.
  // `port` should be a valid port number (1-65535, inclusive).
  // +optional
  optional int32 port = 4;
}

// Webhook holds the configuration of the webhook
message Webhook {
  // Throttle holds the options for throttling the webhook
  // +optional
  optional WebhookThrottleConfig throttle = 1;

  // ClientConfig holds the connection parameters for the webhook
  // required
  optional WebhookClientConfig clientConfig = 2;
}

// WebhookClientConfig contains the information to make a connection with the webhook
message WebhookClientConfig {
  // `url` gives the location of the webhook, in standard URL form
  // (`scheme://host:port/path`). Exactly one of `url` or `service`
  // must be specified.
  //
  // The `host` should not refer to a service running in the cluster; use
  // the `service` field instead. The host might be resolved via external
  // DNS in some apiservers (e.g., `kube-apiserver` cannot resolve
  // in-cluster DNS as that would be a layering violation). `host` may
  // also be an IP address.
  //
  // Please note that using `localhost` or `127.0.0.1` as a `host` is
  // risky unless you take great care to run this webhook on all hosts
  // which run an apiserver which might need to make calls to this
  // webhook. Such installs are likely to be non-portable, i.e., not easy
  // to turn up in a new cluster.
  //
  // The scheme must be "https"; the URL must begin with "https://".
  //
  // A path is optional, and if present may be any string permissible in
  // a URL. You may use the path to pass an arbitrary string to the
  // webhook, for example, a cluster identifier.
  //
  // Attempting to use a user or basic auth e.g. "user:password@" is not
  // allowed. Fragments ("#...") and query parameters ("?...") are not
  // allowed, either.
  //
  // +optional
  optional string url = 1;

  // `service` is a reference to the service for this webhook. Either
  // `service` or `url` must be specified.
  //
  // If the webhook is running within the cluster, then you should use `service`.
  //
  // +optional
  optional ServiceReference service = 2;

  // `caBundle` is a PEM encoded CA bundle which will be used to validate the webhook's server certificate.
  // If unspecified, system trust roots on the apiserver are used.
  // +optional
  optional bytes caBundle = 3;
}

// WebhookThrottleConfig holds the configuration for throttling events
message WebhookThrottleConfig {
  // ThrottleQPS maximum number of batches per second
  // default 10 QPS
  // +optional
  optional int64 qps = 1;

  // ThrottleBurst is the maximum number of events sent at the same moment
  // default 15 QPS
  // +optional
  optional int64 burst = 2;
}

