/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = 'proto2';

package k8s.io.api.auditregistration.v1alpha1;

import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1alpha1";

// AuditSink represents a cluster level audit sink
message AuditSink {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec defines the audit configuration spec
  optional AuditSinkSpec spec = 2;
}

// AuditSinkList is a list of AuditSink items.
message AuditSinkList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of audit configurations.
  repeated AuditSink items = 2;
}

// AuditSinkSpec holds the spec for the audit sink
message AuditSinkSpec {
  // Policy defines the policy for selecting which events should be sent to this audit sink
  // if undefined it will default to the statically configured cluster policy if available
  // if neither exist the backend will fail
  // +optional
  optional Policy policy = 1;

  // Backend to send events
  optional Backend backend = 2;
}

// Backend holds the configuration for the backend
message Backend {
  // Webhook holds the webhook backend
  // +optional
  optional WebhookBackend webhook = 1;
}

// GroupResources represents resource kinds in an API group.
message GroupResources {
  // Group is the name of the API group that contains the resources.
  // The empty string represents the core API group.
  // +optional
  optional string group = 1;

  // Resources is a list of resources this rule applies to.
  // 
  // For example:
  // 'pods' matches pods.
  // 'pods/log' matches the log subresource of pods.
  // '*' matches all resources and their subresources.
  // 'pods/*' matches all subresources of pods.
  // '*/scale' matches all scale subresources.
  // 
  // If wildcard is present, the validation rule will ensure resources do not
  // overlap with each other.
  // 
  // An empty list implies all resources and subresources in this API groups apply.
  // +optional
  repeated string resources = 2;

  // ResourceNames is a list of resource instance names that the policy matches.
  // Using this field requires Resources to be specified.
  // An empty list implies that every instance of the resource is matched.
  // +optional
  repeated string resourceNames = 3;
}

// Policy defines the configuration of audit logging, and the rules for how different request
// categories are logged.
message Policy {
  // Rules specify the audit Level a request should be recorded at.
  // A request may match multiple rules, in which case the FIRST matching rule is used.
  // The default audit level is None, but can be overridden by a catch-all rule at the end of the list.
  // PolicyRules are strictly ordered.
  repeated PolicyRule rules = 1;

  // OmitStages is a list of stages for which no events are created. Note that this can also
  // be specified per rule in which case the union of both are omitted.
  // +optional
  repeated string omitStages = 2;
}

// PolicyRule maps requests based off metadata to an audit Level.
// Requests must match the rules of every field (an intersection of rules).
message PolicyRule {
  // The Level that requests matching this rule are recorded at.
  optional string level = 1;

  // The users (by authenticated user name) this rule applies to.
  // An empty list implies every user.
  // +optional
  repeated string users = 2;

  // The user groups this rule applies to. A user is considered matching
  // if it is a member of any of the UserGroups.
  // An empty list implies every user group.
  // +optional
  repeated string userGroups = 3;

  // The verbs that match this rule.
  // An empty list implies every verb.
  // +optional
  repeated string verbs = 4;

  // Resources that this rule matches. An empty list implies all kinds in all API groups.
  // +optional
  repeated GroupResources resources = 5;

  // Namespaces that this rule matches.
  // The empty string "" matches non-namespaced resources.
  // An empty list implies every namespace.
  // +optional
  repeated string namespaces = 6;

  // NonResourceURLs is a set of URL paths that should be audited.
  // *s are allowed, but only as the full, final step in the path.
  // Examples:
  //  "/metrics" - Log requests for apiserver metrics
  //  "/healthz*" - Log all health checks
  // +optional
  repeated string nonResourceURLs = 7;

  // OmitStages is a list of stages for which no events are created. Note that this can also
  // be specified policy wide in which case the union of both are omitted.
  // An empty list means no restrictions will apply.
  // +optional
  repeated string omitStages = 8;
}

// ServiceReference holds a reference to Service.legacy.k8s.io
message ServiceReference {
  // `namespace` is the namespace of the service.
  // Required
  optional string namespace = 1;

  // `name` is the name of the service.
  // Required
  optional string name = 2;

  // `path` is an optional URL path which will be sent in any request to
  // this service.
  // +optional
  optional string path = 3;
}

// WebhookBackend holds the configuration of the webhooks
message WebhookBackend {
  // InitialBackoff is amount of time to wait before retrying the first failed request in seconds
  // default 10s
  // +optional
  optional int64 initialBackoff = 1;

  // ThrottleConfig holds the options for throttling the webhook
  // default true
  // +optional
  optional WebhookThrottleConfig throttleConfig = 2;

  // ClientConfig holds the connection parameters for the webhook
  // required
  optional WebhookClientConfig clientConfig = 3;
}

// WebhookClientConfig contains the information to make a connection with the webhook
message WebhookClientConfig {
  // `url` gives the location of the webhook, in standard URL form
  // (`[scheme://]host:port/path`). Exactly one of `url` or `service`
  // must be specified.
  // 
  // The `host` should not refer to a service running in the cluster; use
  // the `service` field instead. The host might be resolved via external
  // DNS in some apiservers (e.g., `kube-apiserver` cannot resolve
  // in-cluster DNS as that would be a layering violation). `host` may
  // also be an IP address.
  // 
  // Please note that using `localhost` or `127.0.0.1` as a `host` is
  // risky unless you take great care to run this webhook on all hosts
  // which run an apiserver which might need to make calls to this
  // webhook. Such installs are likely to be non-portable, i.e., not easy
  // to turn up in a new cluster.
  // 
  // The scheme must be "https"; the URL must begin with "https://".
  // 
  // A path is optional, and if present may be any string permissible in
  // a URL. You may use the path to pass an arbitrary string to the
  // webhook, for example, a cluster identifier.
  // 
  // Attempting to use a user or basic auth e.g. "user:password@" is not
  // allowed. Fragments ("#...") and query parameters ("?...") are not
  // allowed, either.
  // 
  // +optional
  optional string url = 1;

  // `service` is a reference to the service for this webhook. Either
  // `service` or `url` must be specified.
  // 
  // If the webhook is running within the cluster, then you should use `service`.
  // 
  // Port 443 will be used if it is open, otherwise it is an error.
  // 
  // +optional
  optional ServiceReference service = 2;

  // `caBundle` is a PEM encoded CA bundle which will be used to validate
  // the webhook's server certificate.
  // +optional
  optional bytes caBundle = 3;
}

// WebhookThrottleConfig holds the configuration for throttling events
message WebhookThrottleConfig {
  // ThrottleQPS maximum number of batches per second
  // default 10 QPS
  // +optional
  optional float throttleQPS = 1;

  // ThrottleBurst is the maximum number of events sent at the same moment
  // default 15 QPS
  // +optional
  optional int64 throttleBurst = 2;
}

