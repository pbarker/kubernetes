/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1alpha1

// This file contains a collection of methods that can be used from go-restful to
// generate Swagger API documentation for its models. Please read this PR for more
// information on the implementation: https://github.com/emicklei/go-restful/pull/215
//
// TODOs are ignored from the parser (e.g. TODO(andronat):... || TODO:...) if and only if
// they are on one line! For multiple line or blocks that you want to ignore use ---.
// Any context after a --- is ignored.
//
// Those methods can be generated by using hack/update-generated-swagger-docs.sh

// AUTO-GENERATED FUNCTIONS START HERE. DO NOT EDIT.
var map_AuditClass = map[string]string{
	"":                "AuditClass is a set of rules that categorize requests",
	"users":           "The users (by authenticated user name) this rule applies to. An empty list implies every user.",
	"userGroups":      "The user groups this rule applies to. A user is considered matching if it is a member of any of the UserGroups. An empty list implies every user group.",
	"verbs":           "The verbs that match this rule. An empty list implies every verb.",
	"resources":       "Resources that this rule matches. An empty list implies all kinds in all API groups.",
	"namespaces":      "Namespaces that this rule matches. The empty string \"\" matches non-namespaced resources. An empty list implies every namespace.",
	"nonResourceURLs": "NonResourceURLs is a set of URL paths that should be audited. *s are allowed, but only as the full, final step in the path. Examples:\n \"/metrics\" - Log requests for apiserver metrics\n \"/healthz*\" - Log all health checks",
}

func (AuditClass) SwaggerDoc() map[string]string {
	return map_AuditClass
}

var map_AuditClassList = map[string]string{
	"":      "AuditClassList is a list of AuditClass items",
	"items": "List of audit classes",
}

func (AuditClassList) SwaggerDoc() map[string]string {
	return map_AuditClassList
}

var map_AuditSink = map[string]string{
	"":     "AuditSink represents a cluster level audit sink",
	"spec": "Spec defines the audit configuration spec",
}

func (AuditSink) SwaggerDoc() map[string]string {
	return map_AuditSink
}

var map_AuditSinkList = map[string]string{
	"":      "AuditSinkList is a list of AuditSink items.",
	"items": "List of audit configurations.",
}

func (AuditSinkList) SwaggerDoc() map[string]string {
	return map_AuditSinkList
}

var map_AuditSinkSpec = map[string]string{
	"":        "AuditSinkSpec holds the spec for the audit sink",
	"policy":  "Policy defines the policy for selecting which events should be sent to the webhook required",
	"webhook": "Webhook to send events required",
}

func (AuditSinkSpec) SwaggerDoc() map[string]string {
	return map_AuditSinkSpec
}

var map_ClassRule = map[string]string{
	"":       "ClassRule defines how a class is handled per sink",
	"name":   "Name of the AuditClass object",
	"level":  "The Level that all requests are recorded at. available options: None, Metadata, Request, RequestResponse required",
	"stages": "Stages is a list of stages for which events are created.",
}

func (ClassRule) SwaggerDoc() map[string]string {
	return map_ClassRule
}

var map_GroupResources = map[string]string{
	"":              "GroupResources represents resource kinds in an API group.",
	"group":         "Group is the name of the API group that contains the resources. The empty string represents the core API group.",
	"resources":     "Resources is a list of resources this rule applies to.\n\nFor example: 'pods' matches pods. 'pods/log' matches the log subresource of pods. '*' matches all resources and their subresources. 'pods/*' matches all subresources of pods. '*/scale' matches all scale subresources.\n\nIf wildcard is present, the validation rule will ensure resources do not overlap with each other.\n\nAn empty list implies all resources and subresources in this API groups apply.",
	"resourceNames": "ResourceNames is a list of resource instance names that the policy matches. Using this field requires Resources to be specified. An empty list implies that every instance of the resource is matched.",
}

func (GroupResources) SwaggerDoc() map[string]string {
	return map_GroupResources
}

var map_Policy = map[string]string{
	"":           "Policy defines the configuration of how audit events are logged",
	"level":      "The Level that all requests are recorded at. available options: None, Metadata, Request, RequestResponse required",
	"stages":     "Stages is a list of stages for which events are created.",
	"classRules": "ClassRules define how classes should be handled",
}

func (Policy) SwaggerDoc() map[string]string {
	return map_Policy
}

var map_ServiceReference = map[string]string{
	"":          "ServiceReference holds a reference to Service.legacy.k8s.io",
	"namespace": "`namespace` is the namespace of the service. Required",
	"name":      "`name` is the name of the service. Required",
	"path":      "`path` is an optional URL path which will be sent in any request to this service.",
}

func (ServiceReference) SwaggerDoc() map[string]string {
	return map_ServiceReference
}

var map_Webhook = map[string]string{
	"":             "Webhook holds the configuration of the webhook",
	"throttle":     "Throttle holds the options for throttling the webhook",
	"clientConfig": "ClientConfig holds the connection parameters for the webhook required",
}

func (Webhook) SwaggerDoc() map[string]string {
	return map_Webhook
}

var map_WebhookClientConfig = map[string]string{
	"":         "WebhookClientConfig contains the information to make a connection with the webhook",
	"url":      "`url` gives the location of the webhook, in standard URL form (`scheme://host:port/path`). Exactly one of `url` or `service` must be specified.\n\nThe `host` should not refer to a service running in the cluster; use the `service` field instead. The host might be resolved via external DNS in some apiservers (e.g., `kube-apiserver` cannot resolve in-cluster DNS as that would be a layering violation). `host` may also be an IP address.\n\nPlease note that using `localhost` or `127.0.0.1` as a `host` is risky unless you take great care to run this webhook on all hosts which run an apiserver which might need to make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster.\n\nThe scheme must be \"https\"; the URL must begin with \"https://\".\n\nA path is optional, and if present may be any string permissible in a URL. You may use the path to pass an arbitrary string to the webhook, for example, a cluster identifier.\n\nAttempting to use a user or basic auth e.g. \"user:password@\" is not allowed. Fragments (\"#...\") and query parameters (\"?...\") are not allowed, either.",
	"service":  "`service` is a reference to the service for this webhook. Either `service` or `url` must be specified.\n\nIf the webhook is running within the cluster, then you should use `service`.\n\nPort 443 will be used if it is open, otherwise it is an error.",
	"caBundle": "`caBundle` is a PEM encoded CA bundle which will be used to validate the webhook's server certificate. If unspecified, system trust roots on the apiserver are used.",
}

func (WebhookClientConfig) SwaggerDoc() map[string]string {
	return map_WebhookClientConfig
}

var map_WebhookThrottleConfig = map[string]string{
	"":      "WebhookThrottleConfig holds the configuration for throttling events",
	"qps":   "ThrottleQPS maximum number of batches per second default 10 QPS",
	"burst": "ThrottleBurst is the maximum number of events sent at the same moment default 15 QPS",
}

func (WebhookThrottleConfig) SwaggerDoc() map[string]string {
	return map_WebhookThrottleConfig
}

// AUTO-GENERATED FUNCTIONS END HERE
